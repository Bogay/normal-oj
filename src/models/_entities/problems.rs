//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "problems")]
pub struct Model {
    pub created_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub owner_id: i32,
    pub r#type: i32,
    pub status: i32,
    #[sea_orm(unique)]
    pub description_id: i32,
    pub allowed_language: i32,
    pub quota: i32,
    pub test_case_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::problem_descriptions::Entity",
        from = "Column::DescriptionId",
        to = "super::problem_descriptions::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ProblemDescriptions,
    #[sea_orm(has_many = "super::problem_tasks::Entity")]
    ProblemTasks,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::OwnerId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::problem_descriptions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProblemDescriptions.def()
    }
}

impl Related<super::problem_tasks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProblemTasks.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}
